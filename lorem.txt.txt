
ng new testSSR


TFcu4J8gNDYY

ng add @nguniversal/express-engine

tr			     /ejecutar en desarollo	
ng build && ng run testSSR:server    /Compilar

ng add @angular/pwa



En Angular SSR, es recomendable crear la API en un servidor diferente al servidor de Angular, para separar la lógica de la aplicación y mejorar la escalabi	lidad y la modularidad del sistema.

Para alojar el servidor de la API en el mismo cloud server que el servidor de Angular, es posible configurar Nginx como proxy inverso para redirigir las solicitudes a los diferentes servidores.

Aquí hay un ejemplo de configuración de Nginx para redirigir las solicitudes a un servidor de API que se ejecuta en el puerto 3000 y al servidor de Angular que se ejecuta en el puerto 4000:


http {
  upstream api {
    server localhost:3000;
  }

  server {
    listen 80;

    location /api {
      proxy_pass http://api;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
    }

    location / {
      proxy_pass http://localhost:4000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
    }
  }
}
En este ejemplo, Nginx está configurado para redirigir las solicitudes que comienzan con /api al servidor de API que se ejecuta en localhost:3000. Para todas las demás solicitudes, se redirigirán al servidor de Angular que se ejecuta en localhost:4000.

Es importante tener en cuenta que esta es solo una configuración básica de Nginx y que puede haber otros ajustes y optimizaciones que se deben realizar dependiendo de las necesidades específicas de su aplicació

ara configurar Nginx para un servidor Angular SSR que se comunica con otro servidor API en el mismo servidor cloud con certificado SSL, se pueden seguir los siguientes pasos:

Instalar Nginx en el servidor y asegurarse de que esté en ejecución.

Crear un archivo de configuración para el servidor Angular SSR en el directorio /etc/nginx/conf.d/ con un nombre descriptivo, como angular.conf.

Agregar las siguientes líneas de configuración al archivo angular.conf:

bash
Copy code
server {
  listen 80;
  server_name example.com;

  location / {
    return 301 https://$server_name$request_uri;
  }
}

server {
  listen 443 ssl;
  server_name example.com;

  ssl_certificate /path/to/certificate.crt;
  ssl_certificate_key /path/to/private.key;

  location /api {
    proxy_pass http://localhost:3000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }

  location / {
    root /path/to/angular/dist;
    try_files $uri /index.html;
  }
}
Reemplazar example.com con el nombre de dominio de su servidor y /path/to/ con las rutas de archivo reales de su certificado SSL y archivos privados.

Guarde y cierre el archivo de configuración.

Reinicie Nginx para que la configuración surta efecto.

Ahora, su servidor Angular SSR debería estar configurado para comunicarse con su servidor API a través de Nginx en el mismo servidor cloud utilizando SSL. Las solicitudes a example.com/api se pasarán al servidor API en localhost:3000, y las solicitudes a cualquier otra ruta se enviarán a la aplicación Angular SSR en /path/to/angular/dist.


----------------------------------------

Para crear un servidor Node.js con Express que se conecte a MongoDB, sigue estos pasos:

Instala los paquetes necesarios:

Copy code
npm install express mongoose
Crea un archivo index.js y configura el servidor Express:

javascript
Copy code
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hola Mundo!');
});

app.listen(port, () => {
  console.log(`Servidor corriendo en http://localhost:${port}`);
});
Crea una conexión a MongoDB con Mongoose en el mismo archivo index.js:

javascript
Copy code
const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/mi_base_de_datos', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

const db = mongoose.connection;

db.on('error', console.error.bind(console, 'Error de conexión:'));
db.once('open', () => {
  console.log('Conexión exitosa a la base de datos');
});
En este ejemplo, estamos creando una conexión a una base de datos llamada mi_base_de_datos en localhost en el puerto 27017. También estamos configurando algunas opciones para evitar advertencias en la consola.

Agrega tus modelos de Mongoose a otro archivo. Por ejemplo, crea un archivo models.js y agrega lo siguiente:

javascript
Copy code
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  age: Number
});

const User = mongoose.model('User', userSchema);

module.exports = { User };


En el archivo index.js, importa tus modelos y úsalos en tus rutas:

javascript Copy code

const { User } = require('./models');

app.get('/users', async (req, res) => {
  const users = await User.find();
  res.json(users);
});
En este ejemplo, estamos creando una ruta /users que devuelve todos los usuarios de la base de datos.

Ejecuta tu servidor:

Copy code
node index.js
Si todo funciona correctamente, deberías ver los mensajes "Servidor corriendo en http://localhost:3000" y "Conexión exitosa a la base de datos" en la consola.

Con estos pasos, has creado un servidor Node.js con Express que se conecta a MongoDB y usa modelos de Mongoose en tus rutas.


-------------------------------------
Instalar bootrap 5
estos comandos instalaran las dependencias del bootatrap, jquery y el @popperjs/core que son necesarios para darle mejor potencial al funcionamiento del framework.

Instalamos dependencias necesarias desde el “NPM”, lo primero que tenemos que hacer es ir a nuestra consola y tipear lo siguiente.

npm install bootstrap jquery @popperjs/core

Luego de eso nos dirigimos al archivo “angular.json” y colocamos las siguientes instrucciones en los objetos “styles” y “scripts” en donde llamaremos a las propiedades css del bootstrap y las dependencias scripts correspondientes a las interacciones de cada uno.




"styles": [
  "node_modules/bootstrap/dist/css/bootstrap.min.css",
  "src/styles.scss"
],
"scripts": [
  "node_modules/jquery/dist/jquery.min.js",
  "node_modules/@popperjs/core/dist/umd/popper.min.js",
  "node_modules/bootstrap/dist/js/bootstrap.min.js"
]


Para crear una tubería en Angular que convierta el formato "2023-03-12T03:43:56.065Z" en "días horas", puedes seguir estos pasos:

Crea un archivo TypeScript en tu proyecto de Angular, por ejemplo "date-converter.pipe.ts".

Define la tubería e importa las clases necesarias:

typescript
Copy code
import { Pipe, PipeTransform } from '@angular/core';
typescript
Copy code
@Pipe({
  name: 'dateConverter'
})
export class DateConverterPipe implements PipeTransform {
Define la transformación que realizará la tubería. En este caso, vamos a calcular la diferencia entre la fecha actual y la fecha proporcionada, y convertir esta diferencia en días y horas:
typescript
Copy code
transform(value: string): string {
    const currentDate = new Date();
    const providedDate = new Date(value);
    const diffTime = Math.abs(currentDate.getTime() - providedDate.getTime());
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor((diffTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));

    return diffDays + ' días ' + diffHours + ' horas';
  }
}
Ahora puedes utilizar la tubería en cualquier lugar de tu proyecto. Para hacerlo, añade el prefijo "dateConverter" al nombre de la tubería y pásale la fecha como argumento:
html
Copy code
<p>{{ '2023-03-12T03:43:56.065Z' | dateConverter }}</p>
Este código mostrará "1 días 9 horas" (suponiendo que la fecha actual sea el 13 de marzo de 2023 a las 12:00 PM).


---------------------------------

Para crear un pipe en Angular que reciba como parámetro un array y un string y lo ordene en su campo categoría por el string, puedes seguir los siguientes pasos:

Crea un nuevo archivo TypeScript para el pipe. Puedes nombrarlo "ordenar-por-categoria.pipe.ts".

Importa los módulos necesarios. En este caso, necesitarás importar Pipe y PipeTransform de "@angular/core".

typescript
Copy code
import { Pipe, PipeTransform } from '@angular/core';
Crea la clase del pipe y aplica el decorador @Pipe para definir su nombre y cualquier argumento opcional. En este caso, el nombre será "ordenarPorCategoria".
typescript
Copy code
@Pipe({
  name: 'ordenarPorCategoria'
})
export class OrdenarPorCategoriaPipe implements PipeTransform {
  transform(value: any[], categoria: string): any[] {
    // lógica de ordenamiento aquí
  }
}
Define la función transform, que tomará como parámetro el arreglo que se desea ordenar y el string que indica la categoría por la que se debe ordenar. En esta función, se debe realizar la lógica de ordenamiento utilizando el método sort() de JavaScript.
typescript
Copy code
transform(value: any[], categoria: string): any[] {
  if (!value || value.length === 0) return [];
  
  return value.sort((a, b) => {
    if (a[categoria] < b[categoria]) {
      return -1;
    } else if (a[categoria] > b[categoria]) {
      return 1;
    } else {
      return 0;
    }
  });
}
En el método sort(), se compara la propiedad "categoria" de los objetos a y b y se devuelve -1 si a es menor, 1 si a es mayor y 0 si son iguales.

Para utilizar el pipe en una plantilla de Angular, debes importar el pipe en el módulo correspondiente y declararlo en el arreglo de declaraciones. Luego, puedes utilizarlo en la plantilla con la sintaxis "| ordenarPorCategoria: 'categoria'".

Por ejemplo:

html
Copy code
<div *ngFor="let item of items | ordenarPorCategoria: 'categoria'">
  <!-- contenido del item aquí -->
</div>
Este ejemplo ordenará el arreglo "items" por la propiedad "categoria" en orden ascendente.çççç




-------------------------

La pesca con mosca es una actividad que combina habilidad, paciencia y respeto por la naturaleza. Los ríos y arroyos que albergan especies de trucha, como la marrón, son hábitats frágiles y delicados que requieren una gestión cuidadosa y sostenible. En este artículo, compartiré mi experiencia de una gran captura de esas truchas marrón que solo habitan en el en el Río Malleo, cerca de Junín de los Andes, y reflexionaré sobre la importancia de cuidar la naturaleza para mantener viva esta hermosa actividad.

Mi historia comienza en el hermoso pueblo de Junín de los Andes, ubicado en la provincia de Neuquén, Argentina. Conocido por ser uno de los principales destinos de pesca con mosca en Sudamérica, Junín de los Andes cuenta con una gran cantidad de ríos y arroyos cristalinos, que son el hogar de una variedad de especies de trucha.

Una mañana temprano, me dirigí al Río Malleo, un río de aguas claras y frías que fluye por los alrededores de Junín de los Andes. Mi equipo de pesca estaba listo, mi mosca había sido elegida cuidadosamente, y estaba ansioso por comenzar mi aventura. Al llegar al río, sentí una sensación de emoción y anticipación mientras caminaba por la orilla, buscando el lugar perfecto para lanzar mi mosca.

Después de unos minutos, encontré un lugar adecuado y comencé a lanzar mi mosca con la técnica correcta. Mi paciencia finalmente dio sus frutos cuando vi a una trucha marrón saltando para atrapar mi mosca. La lucha entre la trucha y yo fue intensa, pero finalmente logré sacarla del agua. Era una trucha marrón impresionante, de más de 60 cm de largo y varios kilos de peso. No pude evitar sentir una gran satisfacción y alegría al atrapar a esta hermosa criatura.

Mientras regresaba a mi alojamiento con mi gran captura, reflexioné sobre la importancia de cuidar la naturaleza y de garantizar que este tipo de experiencias sean posibles para las generaciones futuras. La pesca con mosca es una actividad que se basa en la salud y la prosperidad de los ríos y arroyos, y es esencial que trabajemos juntos para proteger y conservar estos hábitats.

Junín de los Andes, como muchas otras comunidades de pescadores en todo el mundo, depende del turismo de pesca con mosca para su economía. Es importante recordar que la pesca sostenible y responsable es fundamental para garantizar que estas comunidades puedan seguir prosperando. Esto significa pescar con un enfoque en la conservación, respetando los tamaños mínimos y máximos de las especies, y practicando el "captura y suelta" cuando sea posible.

Además, es importante trabajar en la conservación de los hábitats naturales de las especies de trucha, como el Río Malleo, para asegurar su supervivencia. La contaminación y la degradación ambiental son amenazas reales para estos ríos y arroyos, y es nuestra responsabilidad tomar medidas para proteger

La pesca con mosca, al igual que cualquier actividad en la que el hombre interactúa con animales, plantea preguntas importantes sobre nuestra relación con el mundo natural. Desde una perspectiva filosófica, esta relación puede ser vista como una interacción entre dos seres vivos que comparten un espacio en el mundo, y que están ligados por una cadena de interdependencia y mutualismo.

En la pesca con mosca, el pescador se encuentra en un ambiente natural, rodeado de animales salvajes y especies de peces que coexisten en un ecosistema complejo y delicado. Desde esta perspectiva, la actividad de pesca es una forma de entrar en contacto con la naturaleza, de explorar y comprender la complejidad de un mundo que, en muchas ocasiones, se nos escapa.

Sin embargo, esta interacción entre el hombre y la naturaleza no siempre ha sido armoniosa. Históricamente, la actividad humana ha estado marcada por una actitud de dominio y explotación hacia los seres vivos que nos rodean. Desde una perspectiva más contemporánea, se ha planteado la necesidad de desarrollar una ética que permita una relación más equilibrada entre el hombre y el medio ambiente.

En el caso de la pesca con mosca, esta ética implica un enfoque en la conservación y el respeto hacia las especies de peces y el ecosistema que los alberga. Esto significa no solo pescar de forma responsable, sino también ser conscientes del impacto que nuestras acciones pueden tener en el medio ambiente.

En última instancia, la pesca con mosca es una actividad que puede permitirnos conectar con la naturaleza de una manera significativa y profunda. Al adoptar una actitud de respeto y conservación hacia el mundo natural, podemos encontrar una nueva forma de interactuar con el entorno, y de ser parte de una relación más equilibrada y sostenible entre el hombre y el mundo que nos rodea.

Los ríos de montaña son uno de los escenarios más atractivos para la pesca con mosca. Estos cuerpos de agua se caracterizan por tener una alta velocidad de corriente, una gran variabilidad en la profundidad y un entorno natural en el que la fauna y la flora autóctonas se encuentran en su máximo esplendor.

Además, los ríos de montaña presentan un desafío único para los pescadores con mosca. La corriente rápida y el cambio constante en las profundidades de los pozos de pesca, hacen que la pesca en estos ríos sea una actividad que requiere mucha habilidad y técnica.

Por otro lado, los ríos de montaña ofrecen un entorno natural increíble para la práctica de la pesca con mosca. En este ambiente se pueden encontrar truchas arcoíris, truchas marrones y otras especies autóctonas de gran valor para la pesca deportiva. Además, la fauna y la flora autóctonas crean un entorno natural que se convierte en un refugio de tranquilidad y paz para el pescador.

En resumen, los ríos de montaña son un escenario ideal para la práctica de la pesca con mosca. Su entorno natural, la diversidad de especies y su desafiante corriente, hacen de estos ríos un lugar perfecto para aquellos pescadores que buscan una experiencia única en contacto con la naturaleza.


--------------------------------------------------------------------------------------------------------------
Para generar un efecto de transición en Angular cuando se utiliza *ngFor para mostrar contenido, se puede hacer uso de la directiva de animación @trigger. Esta directiva permite definir animaciones para los diferentes cambios en los estados de un componente. A continuación, se describe cómo implementar un efecto de transición al agregar o eliminar elementos de un *ngFor:

Importar los módulos necesarios:
typescript
Copy code
import { trigger, transition, style, animate } from '@angular/animations';
Agregar la directiva de animación al componente que contiene el *ngFor:
html
Copy code
<div [@fadeInOut]> 
  <div *ngFor="let item of items">{{ item }}</div> 
</div>
Definir la animación utilizando la directiva @trigger:
typescript
Copy code
@Component({
  selector: 'app-my-component',
  templateUrl: './my-component.component.html',
  styleUrls: ['./my-component.component.css'],
  animations: [
    trigger('fadeInOut', [
      transition(':enter', [
        style({ opacity: 0 }),
        animate(500, style({ opacity: 1 })),
      ]),
      transition(':leave', [
        animate(500, style({ opacity: 0 })),
      ]),
    ]),
  ],
})
En este ejemplo, se define la animación fadeInOut que tiene dos transiciones: una para el estado :enter y otra para el estado :leave. En la transición :enter, se define el estilo inicial opacity: 0, seguido de una animación de 500ms que cambia el estilo a opacity: 1. En la transición :leave, se define una animación que oculta el elemento gradualmente, hasta que el estilo final sea opacity: 0.

Con estos pasos, se logra que al agregar o eliminar elementos del *ngFor, se realice una transición suave y elegante, lo que mejora la experiencia de usuario.
